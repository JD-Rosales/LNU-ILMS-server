// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum UserRoles {
  ADMIN
  LIBRARIAN
  STUDENT
}

model Admin {
  id        Int       @id @default(autoincrement())
  role      UserRoles @default(ADMIN)
  email     String    @unique
  username  String    @unique
  password  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Librarian {
  id         Int       @id @default(autoincrement())
  role       UserRoles @default(LIBRARIAN)
  employeeId Int       @unique
  email      String    @unique
  password   String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Student {
  id             Int             @id @default(autoincrement())
  role           UserRoles       @default(STUDENT)
  studentId      Int             @unique
  email          String          @unique
  fullname       String
  profilePhoto   String?
  profilePhotoId String?
  course         String
  college        String
  mobile         String
  password       String
  borrowedBooks  BorrowedBook[]
  borrowRequests BorrowRequest[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}

model Author {
  id        Int       @id @default(autoincrement())
  name      String
  status    Boolean   @default(true)
  books     Book[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  isDeleted Boolean   @default(false)
  deletedAt DateTime?
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String
  status    Boolean
  books     Book[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  isDeleted Boolean   @default(false)
  deletedAt DateTime?
}

model Book {
  id             Int             @id @default(autoincrement())
  isbn           Int             @unique
  name           String
  bookCover      String?
  bookCoverId    String?
  author         Author          @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId       Int
  category       Category[]
  copies         Int             @default(1)
  borrowedBy     BorrowedBook[]
  borrowRequests BorrowRequest[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt

  @@index([authorId])
}

model BorrowRequest {
  id          Int      @id @default(autoincrement())
  student     Student  @relation(fields: [studentId], references: [id])
  studentId   Int
  book        Book     @relation(fields: [bookId], references: [id])
  bookId      Int
  requestDate DateTime @default(now())
  isApproved  Boolean  @default(false)
  updatedAt   DateTime @updatedAt

  @@index([studentId])
  @@index([bookId])
}

model BorrowedBook {
  id           Int       @id @default(autoincrement())
  student      Student   @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId    Int
  book         Book      @relation(fields: [bookId], references: [id], onDelete: Cascade)
  bookId       Int
  dueDate      DateTime
  returnedDate DateTime?
  lateFee      Float
  isReturn     Boolean
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@index([studentId])
  @@index([bookId])
}
